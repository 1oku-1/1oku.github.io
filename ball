import pygame
import sys
import ctypes
from collections import deque

# 初始化 Pygame
pygame.init()

# 屏幕尺寸和颜色常量
WIDTH, HEIGHT = 1460, 735
TRANSPARENT = (255, 0, 255)  # 洋红色作为透明色
RED = (0, 0, 0)

class Ball:
    def __init__(self, x, y, radius):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = RED
        self.vel_x = 0
        self.vel_y = 0
        self.gravity = 0.5
        self.elasticity = 0.8
        self.dragging = False
        self.drag_offset_x = 0
        self.drag_offset_y = 0
        self.drag_start_pos = (0, 0)
        self.drag_start_time = 0
        
        # 拖尾轨迹相关属性
        self.trail_length = 20  # 拖尾最大长度
        self.trail = deque(maxlen=self.trail_length)  # 使用双端队列存储轨迹点

    def update(self, width, height):
        # 添加当前位置到轨迹（非拖拽状态时记录）
        if not self.dragging:
            self.trail.append((self.x, self.y))
        
        if not self.dragging:
            # 应用重力
            self.vel_y += self.gravity
            self.x += self.vel_x
            self.y += self.vel_y

            # 边界碰撞
            if self.x - self.radius < 0:
                self.x = self.radius
                self.vel_x *= -self.elasticity
            elif self.x + self.radius > width:
                self.x = width - self.radius
                self.vel_x *= -self.elasticity
            
            if self.y - self.radius < 0:
                self.y = self.radius
                self.vel_y *= -self.elasticity
            elif self.y + self.radius > height:
                self.y = height - self.radius
                self.vel_y *= -self.elasticity
                self.vel_x *= 0.98

    def draw(self, surface):
        # 绘制拖尾效果
        trail_count = len(self.trail)
        for i, (x, y) in enumerate(self.trail):
            # 计算透明度（线性衰减）
            alpha = int(255 * (1 - i/trail_count))
            # 计算大小衰减
            size = int(self.radius * (1 - i/(trail_count*1.5))/2)
            if size < 1: size = 1
            
            # 创建临时表面绘制半透明圆
            trail_surface = pygame.Surface((size*2, size*2), pygame.SRCALPHA)
            pygame.draw.circle(trail_surface, (0, 0, 0, alpha), (size, size), size)
            surface.blit(trail_surface, (int(x)-size, int(y)-size))

        # 绘制主球体
        pygame.draw.circle(surface, self.color, (int(self.x), int(self.y)), self.radius)

def main():
    # 创建透明窗口
    screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.NOFRAME | pygame.SRCALPHA)
    
    # Windows系统透明设置
    try:
        hwnd = pygame.display.get_wm_info()["window"]
        ctypes.windll.user32.SetWindowLongW(hwnd, -20, 0x00080000)
        ctypes.windll.user32.SetLayeredWindowAttributes(hwnd, 0x00FF00FF, 0, 0x00000001)
    except:
        pass

    pygame.display.set_caption("透明弹力球（拖尾版）")
    clock = pygame.time.Clock()
    ball = Ball(WIDTH//2, HEIGHT//2, 20)

    running = True
    while running:
        # 填充透明背景
        screen.fill(TRANSPARENT)
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
                running = False

            # 鼠标事件处理
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                mouse_pos = pygame.mouse.get_pos()
                distance = pygame.math.Vector2(mouse_pos).distance_to((ball.x, ball.y))
                if distance <= ball.radius:
                    ball.dragging = True
                    ball.drag_offset_x = mouse_pos[0] - ball.x
                    ball.drag_offset_y = mouse_pos[1] - ball.y
                    ball.drag_start_pos = mouse_pos
                    ball.drag_start_time = pygame.time.get_ticks()
                    ball.vel_x = ball.vel_y = 0
                    ball.trail.clear()  # 拖拽时清空轨迹

            elif event.type == pygame.MOUSEBUTTONUP and event.button == 1:
                if ball.dragging:
                    dt = pygame.time.get_ticks() - ball.drag_start_time
                    if dt < 1: dt = 1
                    current_pos = pygame.mouse.get_pos()
                    delta = pygame.math.Vector2(
                        current_pos[0] - ball.drag_start_pos[0],
                        current_pos[1] - ball.drag_start_pos[1]
                    )
                    ball.vel_x = delta.x / dt * 30
                    ball.vel_y = delta.y / dt * 30
                    ball.dragging = False

            elif event.type == pygame.MOUSEMOTION and ball.dragging:
                mouse_pos = pygame.mouse.get_pos()
                ball.x = mouse_pos[0] - ball.drag_offset_x
                ball.y = mouse_pos[1] - ball.drag_offset_y

        ball.update(WIDTH, HEIGHT)
        ball.draw(screen)
        pygame.display.update()
        clock.tick(60)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
